#import:
#  - ~/.config/alacritty/alacritty.yml

# -------------------------------------------------------------------------------- #

#  ~ Environment variables

env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  TERM: alacritty

# -------------------------------------------------------------------------------- #

# ~ Window

window:
  dimensions:
    columns: 134
    lines: 32

  # Let WM decide
  position:
    x: 0
    y: 0

  padding:
    x: 2
    y: 2

  dynamic_padding: true

  decorations: none

  opacity: 0.9

  startup_mode: Windowed

  title: Alacritty

  dynamic_title: true

  class:
    instance: Alacritty
    general: Alacritty

  # Dark, light, none
  decorations_theme_variant: none

# -------------------------------------------------------------------------------- #

#scrolling:
  # Maximum number of lines in the scrollback buffer.
  # Specifying '0' will disable scrolling.
  #history: 10000

  # Scrolling distance multiplier.
  #multiplier: 3

# -------------------------------------------------------------------------------- #

# ~ Font

font:
  normal:
    family: FiraCode Nerd Font Mono
    style: Regular

  bold:
    family: FiraCode Nerd Font Mono
    style: Bold

  italic:
    family: FiraCode Nerd Font Mono
    style: Light

  bold_italic:
    family: FiraCode Nerd Font Mono
    style: Medium

  size: 18.0

  # Spacing
  offset:
    x: 0
    y: 0

  # Glyph offset within cells
  glyph_offset:
    x: 0
    y: 0

  builtin_box_drawing: true

  draw_bold_text_with_bright_colors: true

# -------------------------------------------------------------------------------- #

# ~ Tomorrow Night

#colors:
  # Default colors
  #primary:
  #  background: '#1d1f21'
  #  foreground: '#c5c8c6'

    # Bright and dim foreground colors
    # The dimmed foreground color is calculated automatically if it is not
    # present. If the bright foreground color is not set, or
    # `draw_bold_text_with_bright_colors` is `false`, the normal foreground
    # color will be used.
    #
    #dim_foreground: '#828482'
    #bright_foreground: '#eaeaea'

  # Cursor colors
  # Colors which should be used to draw the terminal cursor.
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  #
  #cursor:
  #  text: CellBackground
  #  cursor: CellForeground

  # Vi mode cursor colors
  # Colors for the cursor when the vi mode is active.
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  #
  #vi_mode_cursor:
  #  text: CellBackground
  #  cursor: CellForeground

  # Search colors
  # Colors used for the search bar and match highlighting.
  #
  #search:
    # Allowed values are CellForeground/CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    #matches:
    #  foreground: '#000000'
    #  background: '#ffffff'
    #focused_match:
    #  foreground: '#ffffff'
    #  background: '#000000'

  # Keyboard hints
  #hints:
    # First character in the hint label
    # Allowed values are CellForeground/CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    #
    #start:
    #  foreground: '#1d1f21'
    #  background: '#e9ff5e'

    # All characters after the first one in the hint label
    # Allowed values are CellForeground/CellBackground, which reference the
    # affected cell, or hexadecimal colors like #ff00ff.
    #
    #end:
    #  foreground: '#e9ff5e'
    #  background: '#1d1f21'

  # Line indicator
  # Color used for the indicator displaying the position in history during

  # By default, these will use the opposing primary color.
  #
  #line_indicator:
  #  foreground: None
  #  background: None

  # Footer bar
  # Color used for the footer bar on the bottom, used by search regex input,
  # hyperlink URI preview, etc.
  #
  #footer_bar:
  #  background: '#c5c8c6'
  #  foreground: '#1d1f21'

  # Selection colors
  # Colors which should be used to draw the selection area.
  # Allowed values are CellForeground/CellBackground, which reference the
  # affected cell, or hexadecimal colors like #ff00ff.
  #
  #selection:
  #  text: CellBackground
  #  background: CellForeground

  # Normal colors
  #
  #normal:
  #  black:   '#1d1f21'
  #  red:     '#cc6666'
  #  green:   '#b5bd68'
  #  yellow:  '#f0c674'
  #  blue:    '#81a2be'
  #  magenta: '#b294bb'
  #  cyan:    '#8abeb7'
  #  white:   '#c5c8c6'

  # Bright colors
  #
  #bright:
  #  black:   '#666666'
  #  red:     '#d54e53'
  #  green:   '#b9ca4a'
  #  yellow:  '#e7c547'
  #  blue:    '#7aa6da'
  #  magenta: '#c397d8'
  #  cyan:    '#70c0b1'
  #  white:   '#eaeaea'

  # Dim colors
  # If the dim colors are not set, they will be calculated automatically based
  # on the `normal` colors.
  #
  #dim:
  #  black:   '#131415'
  #  red:     '#864343'
  #  green:   '#777c44'
  #  yellow:  '#9e824c'
  #  blue:    '#556a7d'
  #  magenta: '#75617b'
  #  cyan:    '#5b7d78'
  #  white:   '#828482'

  # Indexed Colors
  # The indexed colors include all colors from 16 to 256.
  # When these are not set, they're filled with sensible defaults.
  # Example:
  #   `- { index: 16, color: '#ff00ff' }`
  #
  #indexed_colors: []

  # Transparent cell backgrounds
  # Whether or not `window.opacity` applies to all cell backgrounds or only to
  # the default background. When set to `true` all cells will be transparent
  # regardless of their background color.
  #
  #transparent_background_colors: false

#######################################
##      START OF COLOR SCHEMES       ##
#######################################
schemes:
  ### Doom One ###
  DoomOne: &DoomOne
    primary:
      background: '#282C34'
      foreground: '#BBC2CF'
    cursor:
      text: CellBackground
      cursor: '#528BFF'
    selection:
      text: CellForeground
      background: '#3E4451'
    normal:
      black:   '#1C1F24'
      red:     '#FF6C6B'
      green:   '#98BE65'
      yellow:  '#DA8548'
      blue:    '#51AFEF'
      magenta: '#C678DD'
      cyan:    '#5699AF'
      white:   '#202328'
    bright:
      black:   '#5B6268'
      red:     '#DA8548'
      green:   '#4DB5BD'
      yellow:  '#ECBE7B'
      blue:    '#B257A0' # 23071D      
      magenta: '#A9A1E1'
      cyan:    '#46D9FF'
      white:   '#DFDFDF'

  ### Dracula ###
  Dracula: &Dracula
    primary:
      background: '#282A36'
      foreground: '#F8F8F2'
    cursor:
      text: CellBackground
      cursor: '#528BFF'
    vi_mode_cursor:
      text: CellBackground
      cursor: CellForeground
    search:
      matches:
        foreground: '#44475A'
        background: '#50FA7B'
      focused_match:
        foreground: '#44475A'
        background: '#FFB86C'
      footer_bar:
        background: '#282A36'
        foreground: '#F8F8F2'
    line_indicator:
      foreground: None
      background: None
    selection:
      text: CellForeground
      background: '#44475A'
    normal:
      black:   '#000000'
      red:     '#FF5555'
      green:   '#50FA7B'
      yellow:  '#F1FA8C'
      blue:    '#BD93F9'
      magenta: '#FF79C6'
      cyan:    '#8BE9FD'
      white:   '#BFBFBF'
    bright:
      black:   '#4D4D4D'
      red:     '#FF6E67'
      green:   '#5AF78E'
      yellow:  '#F4F99D'
      blue:    '#CAA9FA'
      magenta: '#FF92D0'
      cyan:    '#9AEDFE'
      white:   '#E6E6E6'
    dim:
      black:   '#14151B'
      red:     '#FF2222'
      green:   '#1EF956'
      yellow:  '#EBF85B'
      blue:    '#4D5B86'
      magenta: '#FF46B0'
      cyan:    '#59DFFC'
      white:   '#E6E6D1'

  ### Ayu dark ###
  AyuDark: &AyuDark
    primary:
      background: '#0A0E14'
      foreground: '#B3B1AD'
    cursor:
      text: CellBackground
      cursor: '#528BFF'
    search:
      matches:
        foreground: '#44475A'
        background: '#50FA7B'
      focused_match:
        foreground: '#44475A'
        background: '#FFB86C'
      footer_bar:
        background: '#282A36'
        foreground: '#F8F8F2'
    normal:
      black:   '#01060E'
      red:     '#EA6C73'
      green:   '#91B362'
      yellow:  '#F9AF4F'
      blue:    '#53BDFA'
      magenta: '#FAE994'
      cyan:    '#90E1C6'
      white:   '#C7C7C7'
    bright:
      black:   '#686868'
      red:     '#F07178'
      green:   '#C2D94C'
      yellow:  '#FFB454'
      blue:    '#59C2FF'
      magenta: '#FFEE99'
      cyan:    '#95E6CB'
      white:   '#FFFFFF'

  ### Ayu mirage ###
  AyuMirage: &AyuMirage
    primary:
      background: '#1F2430'
      foreground: '#CBCCC6'
      bright_foreground: '#F28779'
    cursor:
      text: CellBackground
      cursor: '#528BFF'
    search:
      matches:
        foreground: '#44475A'
        background: '#50FA7B'
      focused_match:
        foreground: '#44475A'
        background: '#FFB86C'
      footer_bar:
        background: '#282A36'
        foreground: '#F8F8F2'
    normal:
      black:   '#212733'
      red:     '#F08778'
      green:   '#53BF97'
      yellow:  '#FDCC60'
      blue:    '#60B8D6'
      magenta: '#EC7171'
      cyan:    '#98E6CA'
      white:   '#FAFAFA'
    bright:
      black:   '#686868'
      red:     '#F58C7D'
      green:   '#58C49C'
      yellow:  '#FFD165'
      blue:    '#65BDDB'
      magenta: '#F17676'
      cyan:    '#9DEBCF'
      white:   '#FFFFFF'

  ### Tokyo Night ###
  TokyoNight: &TokyoNight
    primary:
      background: '#1A1B26'
      foreground: '#C0CAF5'
    cursor:
      text: CellBackground
      cursor: '#F9AF4F'
    search:
      matches:
        foreground: '#44475A'
        background: '#50FA7B'
      focused_match:
        foreground: '#44475A'
        background: '#FFB86C'
      footer_bar:
        background: '#282A36'
        foreground: '#F8F8F2'
    normal:
      black:   '#15161E'
      red:     '#F7768E'
      green:   '#9ECE6A'
      yellow:  '#E0AF68'
      blue:    '#7AA2F7'
      magenta: '#BB9AF7'
      cyan:    '#7DCFFF'
      white:   '#A9B1D6'
    bright:
      black:   '#414868'
      red:     '#F7768E'
      green:   '#9ECE6A'
      yellow:  '#E0AF68'
      blue:    '#7AA2F7'
      magenta: '#BB9AF7'
      cyan:    '#7DCFFF'
      white:   '#C0CAF5'
    indexed_colors:
      - { index: 16, color: '#FF9E64' }
      - { index: 17, color: '#DB4B4B' }

  ### Tokyo Night Moon ###
  TokyoNightMoon: &TokyoNightMoon
    primary:
      background: '#222436'
      foreground: '#C8D3F5'
    cursor:
      text: CellBackground
      cursor: '#528BFF'
    search:
      matches:
        foreground: '#44475A'
        background: '#50FA7B'
      focused_match:
        foreground: '#44475A'
        background: '#FFB86C'
      footer_bar:
        background: '#282A36'
        foreground: '#F8F8F2'
    normal:
      black:   '#1B1D2B'
      red:     '#FF757F'
      green:   '#C3E88D'
      yellow:  '#FFC777'
      blue:    '#82AAFF'
      magenta: '#C099FF'
      cyan:    '#86E1FC'
      white:   '#828BB8'
    bright:
      black:   '#444A73'
      red:     '#FF757F'
      green:   '#C3E88D'
      yellow:  '#FFC777'
      blue:    '#82AAFF'
      magenta: '#C099FF'
      cyan:    '#86E1FC'
      white:   '#C8D3F5'
    indexed_colors:
      - { index: 16, color: '#FF966C' }
      - { index: 17, color: '#C53B53' }
    
  ### Nightfox ###
  Nightfox: &Nightfox
    primary:
      background: '#192330'
      foreground: '#CDCECF'
    normal:
      black:   '#393B44'
      red:     '#C94F6D'
      green:   '#81B29A'
      yellow:  '#DBC074'
      blue:    '#719CD6'
      magenta: '#9D79D6'
      cyan:    '#63CDCF'
      white:   '#DFDFE0'
    bright:
      black:   '#575860'
      red:     '#D16983'
      green:   '#8EBAA4'
      yellow:  '#E0C989'
      blue:    '#86ABDC'
      magenta: '#BAA1E2'
      cyan:    '#7AD5D6'
      white:   '#E4E4E5'
    indexed_colors:
      - { index: 16, color: '#F4A261' }
      - { index: 17, color: '#D67AD2' }

  ### Duskfox ###
  Duskfox: &Duskfox
    primary:
      background: '#232136'
      foreground: '#E0DEF4'
    normal:
      black:   '#393552'
      red:     '#EB6F92'
      green:   '#A3BE8C'
      yellow:  '#F6C177'
      blue:    '#569FBA'
      magenta: '#C4A7E7'
      cyan:    '#9CCFD8'
      white:   '#E0DEF4'
    bright:
      black:   '#47407D'
      red:     '#F083A2'
      green:   '#B1D196'
      yellow:  '#F9CB8C'
      blue:    '#65B1CD'
      magenta: '#CCB1ED'
      cyan:    '#A6DAE3'
      white:   '#E2E0F7'
    indexed_colors:
      - { index: 16, color: '#EA9A97' }
      - { index: 17, color: '#EB98C3' }

  ### Carbonfox ###
  Carbonfox: &Carbonfox
    primary:
      background: '#161616'
      foreground: '#F2F4F8'
    normal:
      black:   '#282828'
      red:     '#EE5396'
      green:   '#25BE6A'
      yellow:  '#08BDBA'
      blue:    '#78A9FF'
      magenta: '#BE95FF'
      cyan:    '#33B1FF'
      white:   '#DFDFE0'
    bright:
      black:   '#484848'
      red:     '#F16DA6'
      green:   '#46C880'
      yellow:  '#2DC7C4'
      blue:    '#8CB6FF'
      magenta: '#C8A5FF'
      cyan:    '#52BDFF'
      white:   '#E4E4E5'
    indexed_colors:
      - { index: 16, color: '#3DDBD9' }
      - { index: 17, color: '#FF7EB6' }

  ### Terafox ###
  Terafox: &Terafox
    primary:
      background: '#152528'
      foreground: '#E6EAEA'
    normal:
      black:   '#2F3239'
      red:     '#E85C51'
      green:   '#7AA4A1'
      yellow:  '#FDA47F'
      blue:    '#5A93AA'
      magenta: '#AD5C7C'
      cyan:    '#A1CDD8'
      white:   '#EBEBEB'
    bright:
      black:   '#4E5157'
      red:     '#EB746B'
      green:   '#8EB2AF'
      yellow:  '#FDB292'
      blue:    '#73A3B7'
      magenta: '#B97490'
      cyan:    '#AFD4DE'
      white:   '#EEEEEE'
    indexed_colors:
      - { index: 16, color: '#FF8349' }
      - { index: 17, color: '#CB7985' }

  ### Nordfox ###
  Nordfox: &Nordfox
    primary:
      background: '#2E3440'
      foreground: '#CDCECF'
    normal:
      black:   '#3B4252'
      red:     '#BF616A'
      green:   '#A3BE8C'
      yellow:  '#EBCB8B'
      blue:    '#81A1C1'
      magenta: '#B48EAD'
      cyan:    '#88C0D0'
      white:   '#E5E9F0'
    bright:
      black:   '#465780'
      red:     '#D06F79'
      green:   '#B1D196'
      yellow:  '#F0D399'
      blue:    '#8CAFD2'
      magenta: '#C895BF'
      cyan:    '#93CCDC'
      white:   '#E7ECF4'
    indexed_colors:
      - { index: 16, color: '#C9826B' }
      - { index: 17, color: '#BF88BC' }

  ### astromouse (terminal.sexy) ###
  astromouse: &astromouse
    colors:
    # Default colors
    primary:
      background: '#000000'
      foreground: '#FFFFFF'

    # Normal colors
    normal:
      black:   '#1C1C1C'
      red:     '#D770AF'
      green:   '#9ACC79'
      yellow:  '#D0D26B'
      blue:    '#77B6C5'
      magenta: '#A488D9'
      cyan:    '#7FCAB3'
      white:   '#8D8D8D'

    # Bright colors
    bright:
      black:   '#3D3A3A'
      red:     '#D28ABF'
      green:   '#8FB676'
      yellow:  '#C8BC45'
      blue:    '#8FA7B9'
      magenta: '#BD89DE'
      cyan:    '#6EC2A8'
      white:   '#DAD3D3'

#  ~ Themes

#1.  *DoomOne
#2.  *Dracula
#3.  *AyuDark
#4.  *AyuMirage
#5.  *TokyoNight
#6.  *TokyoNightMoon
#7.  *Nightfox
#8.  *Duskfox
#9.  *Carbonfox
#10. *Terafox
#11. *Nordfox
#12. *astromouse

colors: *AyuDark

#######################################
##       END OF COLOR SCHEMES        ##
#######################################


# -------------------------------------------------------------------------------- #

# ~ Bell

# The bell is rung every time the BEL control character is received.
#bell:
  # Visual Bell Animation

  # Values for `animation`:
  #   - Ease
  #   - EaseOut
  #   - EaseOutSine
  #   - EaseOutQuad
  #   - EaseOutCubic
  #   - EaseOutQuart
  #   - EaseOutQuint
  #   - EaseOutExpo
  #   - EaseOutCirc
  #   - Linear
  #animation: EaseOut 

  #duration: 128

  #color: '#2E4B4C'

  # Example:
  #   command:
  #     program: notify-send
  #     args: ["Hello, World!"]
  #command: None

# -------------------------------------------------------------------------------- #

#selection:
  #semantic_escape_chars: ",│`|:\"' ()[]{}<>\t"
  #save_to_clipboard: false

# -------------------------------------------------------------------------------- #

cursor:
  style:
    shape: Block
    blinking: Off

  # Vi mode cursor style
  #vi_mode_style: 

  blink_interval: 750

  #blink_timeout: 5

  unfocused_hollow: true

  #thickness: 0.15

# -------------------------------------------------------------------------------- #

live_config_reload: true

# -------------------------------------------------------------------------------- #

# ~ Shell

# Default:
#   - (Linux/BSD/macOS) `$SHELL` or the user's login shell, if `$SHELL` is unset
# shell:
#   program: "/usr/bin/fish"
#  args:
#    - --login

# Startup directory
# Directory the shell is started in. If this is unset, or `None`, the working
# directory of the parent process will be used.
#
#working_directory: None

# Offer IPC using `alacritty msg` (unix only)
#ipc_socket: true

#mouse:
  #double_click: { threshold: 300 }
  #triple_click: { threshold: 300 }
  #hide_when_typing: false

# -------------------------------------------------------------------------------- #

# ~ Hints

# Terminal hints can be used to find text or hyperlink in the visible part of
# the terminal and pipe it to other applications.
#hints:
  # Keys used for the hint labels.
  #alphabet: "jfkdls;ahgurieowpq"

  # List with all available hints
  #
  # Each hint must have any of `regex` or `hyperlinks` field and either an
  # `action` or a `command` field. The fields `mouse`, `binding` and
  # `post_processing` are optional.
  #
  # The `hyperlinks` option will cause OSC 8 escape sequence hyperlinks to be
  # highlighted.
  #
  # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
  # `mouse.mods` accept the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs and applies only to
  # `regex` matches.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.
  #enabled:
  # - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
  #           [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
  #   hyperlinks: true
  #   command: xdg-open
  #   post_processing: true
  #   mouse:
  #     enabled: true
  #     mods: None
  #   binding:
  #     key: U
  #     mods: Control|Shift

# -------------------------------------------------------------------------------- #

# ~ Mouse bindings

# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings for actions not exclusive to mouse mode)
#
# - Mouse exclusive actions:
#
#   - ExpandSelection
#       Expand the selection to the current mouse cursor location.
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Right,                 action: ExpandSelection }
#  - { mouse: Right,  mods: Control, action: ExpandSelection }
#  - { mouse: Middle, mode: ~Vi,     action: PasteSelection  }

# -------------------------------------------------------------------------------- #

# ~ Key bindings

# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - CreateNewWindow
#       Create a new Alacritty window from the current process.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Perform the action of the first matching hint under the vi mode cursor
#       with `mouse.enabled` set to `true`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#   - CenterAroundViCursor
#       Center view around vi mode cursor
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
#key_bindings:
  #- { key: Paste,                                       action: Paste          }
  #- { key: Copy,                                        action: Copy           }
  #- { key: L,         mods: Control,                    action: ClearLogNotice }
  #- { key: L,         mods: Control, mode: ~Vi|~Search, chars: "\x0c"          }
  #- { key: PageUp,    mods: Shift,   mode: ~Alt,        action: ScrollPageUp   }
  #- { key: PageDown,  mods: Shift,   mode: ~Alt,        action: ScrollPageDown }
  #- { key: Home,      mods: Shift,   mode: ~Alt,        action: ScrollToTop    }
  #- { key: End,       mods: Shift,   mode: ~Alt,        action: ScrollToBottom }
  # Vi Mode
  #- { key: Space,  mods: Shift|Control, mode: ~Search,    action: ToggleViMode            }
  #- { key: Space,  mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: Escape,                      mode: Vi|~Search, action: ClearSelection          }
  #- { key: I,                           mode: Vi|~Search, action: ToggleViMode            }
  #- { key: I,                           mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi|~Search, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi|~Search, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi|~Search, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi|~Search, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi|~Search, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi|~Search, action: Copy                    }
  #- { key: Y,                           mode: Vi|~Search, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi|~Search, action: ClearSelection          }
  #- { key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    }
  #- { key: V,      mods: Alt,           mode: Vi|~Search, action: ToggleSemanticSelection }
  #- { key: Return,                      mode: Vi|~Search, action: Open                    }
  #- { key: Z,                           mode: Vi|~Search, action: CenterAroundViCursor    }
  #- { key: K,                           mode: Vi|~Search, action: Up                      }
  #- { key: J,                           mode: Vi|~Search, action: Down                    }
  #- { key: H,                           mode: Vi|~Search, action: Left                    }
  #- { key: L,                           mode: Vi|~Search, action: Right                   }
  #- { key: Up,                          mode: Vi|~Search, action: Up                      }
  #- { key: Down,                        mode: Vi|~Search, action: Down                    }
  #- { key: Left,                        mode: Vi|~Search, action: Left                    }
  #- { key: Right,                       mode: Vi|~Search, action: Right                   }
  #- { key: Key0,                        mode: Vi|~Search, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi|~Search, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     }
  #- { key: B,                           mode: Vi|~Search, action: SemanticLeft            }
  #- { key: W,                           mode: Vi|~Search, action: SemanticRight           }
  #- { key: E,                           mode: Vi|~Search, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 }
  #- { key: Slash,                       mode: Vi|~Search, action: SearchForward           }
  #- { key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          }
  #- { key: N,                           mode: Vi|~Search, action: SearchNext              }
  #- { key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          }
  # Search Mode
  #- { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
  #- { key: Escape,                mode: Search,     action: SearchCancel          }
  #- { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
  #- { key: U,      mods: Control, mode: Search,     action: SearchClear           }
  #- { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
  #- { key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious }
  #- { key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     }
  #- { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
  #- { key: Down,                  mode: Search,     action: SearchHistoryNext     }
  #- { key: Return,                mode: Search|~Vi, action: SearchFocusNext       }
  #- { key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   }
  # (Windows, Linux, and BSD only)
  #- { key: V,              mods: Control|Shift, mode: ~Vi,        action: Paste            }
  #- { key: C,              mods: Control|Shift,                   action: Copy             }
  #- { key: F,              mods: Control|Shift, mode: ~Search,    action: SearchForward    }
  #- { key: B,              mods: Control|Shift, mode: ~Search,    action: SearchBackward   }
  #- { key: C,              mods: Control|Shift, mode: Vi|~Search, action: ClearSelection   }
  #- { key: Insert,         mods: Shift,                           action: PasteSelection   }
  #- { key: Key0,           mods: Control,                         action: ResetFontSize    }
  #- { key: Equals,         mods: Control,                         action: IncreaseFontSize }
  #- { key: Plus,           mods: Control,                         action: IncreaseFontSize }
  #- { key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize }
  #- { key: Minus,          mods: Control,                         action: DecreaseFontSize }
  #- { key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize }

# -------------------------------------------------------------------------------- #

# ~ Debug

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false
  # Keep the log file after quitting Alacritty.
  #persistent_logging: false
  # Log level

  # Values for `log_level`:
  #   - Off
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn
  # Print all received window events.
  #print_events: false
  # Highlight window damage information.
  #highlight_damage: false
